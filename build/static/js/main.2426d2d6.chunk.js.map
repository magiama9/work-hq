{"version":3,"sources":["components/Board/BoardColumn.js","components/Board/BoardItem.js","components/Board/Board.js","components/Board/index.js","pages/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["BoardColumn","status","changeTaskStatus","children","ref","useRef","useDrop","accept","drop","item","id","BoardItem","useDrag","type","collect","monitor","isDragging","opacity","drag","style","jobList","_id","title","company","channels","labelsMap","interested","applied","responded","interviewing","offer","classes","board","display","margin","width","fontFamily","column","minWidth","height","backgroundColor","columnHead","textAlign","padding","fontSize","cursor","Board","useState","tasks","setTaskStatus","useCallback","task","find","taskIndex","indexOf","newTasks","update","$set","DndProvider","backend","HTML5Backend","map","channel","key","filter","Home","App","Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2426d2d6.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\n\r\n// This should be split into a separate component\r\nconst BoardColumn = ({ status, changeTaskStatus, children }) => {\r\n  const ref = useRef(null);\r\n  const [, drop] = useDrop({\r\n    accept: \"card\", // Tells it what type of thing we can drop in\r\n    drop(item) {\r\n      changeTaskStatus(item.id, status); // Changes the status to the status of the column\r\n    }\r\n  });\r\n  drop(ref);\r\n  return <div ref={ref}> {children}</div>;\r\n};\r\n\r\nexport default BoardColumn;\r\n","import React, { useRef } from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\n\r\n// This should be split into a separate component\r\n// Defines each item on the board\r\nconst BoardItem = ({ id, children }) => {\r\n  const ref = useRef(null);\r\n  const [{ isDragging }, drag] = useDrag({\r\n    item: { type: \"card\", id },\r\n    collect: monitor => ({\r\n      isDragging: monitor.isDragging()\r\n    })\r\n  });\r\n  const opacity = isDragging ? 0 : 1;\r\n  drag(ref);\r\n  return (\r\n    <div ref={ref} style={{ opacity }}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardItem;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\"; // Doesn't work with touch\r\nimport update from \"immutability-helper\";\r\nimport BoardColumn from \"./BoardColumn\";\r\nimport BoardItem from \"./BoardItem\";\r\n\r\n// Dummy job data\r\nconst jobList = [\r\n  {\r\n    _id: 1,\r\n    title: \"Street View Driver\",\r\n    company: \"Google\",\r\n    status: \"interested\"\r\n  },\r\n  { _id: 2, title: \"Hype Man\", company: \"Theranos\", status: \"interested\" },\r\n  {\r\n    _id: 3,\r\n    title: \"Back End Developer\",\r\n    company: \"Google\",\r\n    status: \"interested\"\r\n  },\r\n  {\r\n    _id: 4,\r\n    title: \"Front End Developer\",\r\n    company: \"Google\",\r\n    status: \"applied\"\r\n  },\r\n  { _id: 5, title: \"Warehouse Slave\", company: \"Amazon\", status: \"applied\" },\r\n  { _id: 6, title: \"Moustache Groomer\", company: \"Apple\", status: \"responded\" },\r\n  { _id: 7, title: \"'Genius'\", company: \"Apple\", status: \"interviewing\" },\r\n  { _id: 8, title: \"Instructor\", company: \"2U\", status: \"interviewing\" },\r\n  { _id: 9, title: \"Urban Beekeeper\", company: \"Hive\", status: \"offer\" },\r\n  { _id: 10, title: \"Alcoholic\", company: \"Freelance\", status: \"offer\" }\r\n];\r\n\r\n// The different columns\r\nconst channels = [\r\n  \"interested\",\r\n  \"applied\",\r\n  \"responded\",\r\n  \"interviewing\",\r\n  \"offer\"\r\n];\r\n\r\n// What we label the columns.\r\n// Key : Label\r\n// Key is what we store in state\r\n// Label is what's displayed\r\nconst labelsMap = {\r\n  interested: \"Interested\",\r\n  applied: \"Applied\",\r\n  responded: \"Responded\",\r\n  interviewing: \"Interviewing\",\r\n  offer: \"Offer\"\r\n};\r\n\r\n// Some shitty styling\r\nconst classes = {\r\n  board: {\r\n    display: \"flex\",\r\n    margin: \"0 auto\",\r\n    width: \"90vw\",\r\n    fontFamily: 'Arial, \"Helvetica Neue\", sans-serif'\r\n  },\r\n  column: {\r\n    minWidth: 200,\r\n    width: \"18vw\",\r\n    height: \"80vh\",\r\n    margin: \"0 auto\",\r\n    backgroundColor: \"#FCC8B2\"\r\n  },\r\n  columnHead: {\r\n    textAlign: \"center\",\r\n    padding: 10,\r\n    fontSize: \"1.2em\",\r\n    backgroundColor: \"#C6D8AF\"\r\n  },\r\n  item: {\r\n    padding: 10,\r\n    margin: 10,\r\n    fontSize: \"0.8em\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"white\"\r\n  }\r\n};\r\n\r\nconst Board = () => {\r\n  const [tasks, setTaskStatus] = useState(jobList);\r\n\r\n  const changeTaskStatus = useCallback(\r\n    (id, status) => {\r\n      // Match the task to the ID\r\n      let task = tasks.find(task => task._id === id);\r\n      const taskIndex = tasks.indexOf(task);\r\n\r\n      // Set the working task\r\n      task = { ...task, status };\r\n\r\n      // Update the tasks\r\n      let newTasks = update(tasks, {\r\n        [taskIndex]: { $set: task }\r\n      });\r\n\r\n      // Update state\r\n      setTaskStatus(newTasks);\r\n    },\r\n    [tasks]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {/* This handles the click events */}\r\n      {/* I need to figure out how to make it work with touch events */}\r\n      <DndProvider backend={HTML5Backend}>\r\n        <section style={classes.board}>\r\n          {/* Maps over the different channels and creates a column for each */}\r\n          {channels.map(channel => (\r\n            <BoardColumn\r\n              key={channel}\r\n              status={channel}\r\n              changeTaskStatus={changeTaskStatus}\r\n            >\r\n              <div style={classes.column}>\r\n                <div style={classes.columnHead}>{labelsMap[channel]}</div>\r\n                <div>\r\n                  {/* Renders the correct tasks onto the column */}\r\n                  {tasks\r\n                    .filter(item => item.status === channel)\r\n                    .map(item => (\r\n                      <BoardItem key={item._id} id={item._id}>\r\n                        <div style={classes.item}>\r\n                          {item.title} - {item.company}\r\n                        </div>\r\n                      </BoardItem>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n            </BoardColumn>\r\n          ))}\r\n        </section>\r\n      </DndProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import Board from \"./Board\";\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport Board from \"../components/Board/\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      <h1>Work HQ - Your Job Search Launchpad</h1>\r\n      <Board />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Dashboard from \"./pages/Dashboard\";\n\nfunction App() {\n  return (\n    <div>\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}